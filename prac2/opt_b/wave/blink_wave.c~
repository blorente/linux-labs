#include <stdio.h>
#include <math.h>
#include <complex.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <pthread.h>

#define DRIVER_PATH "/dev/usb/blinkstick0"
#define NR_LEDS 8
#define INTERVAL 500000
#define BRIGHTNESS_COEFFICIENT 15 // Reduce the intensity of the colors
#define PI 3.14159265
#define MAX_MESSAGE_LEN 100

enum {
	BLUE_SHIFT = 0,
	GREEN_SHIFT = 8,
	RED_SHIFT = 16,
	NUM_SHIFTS
};

/* 
	Global variable to denote the color
	being displayed. Only the main thread
	can modify it, and the display thread
	only reads it, so there are no data races.
*/
int base_shift = BLUE_SHIFT; // BLUE color for now

/* 
	The reverse happens with this flag.
	Only the display thread can write to it.
*/
int is_displaying = 1;

void print_usage( void ) {
	printf("Usage: ./blink <led> <repo>\nExample: ./ledctl 0 /path/to/my_repo\n");
}

int compose_message(unsigned int *colors, char *target) {
	sprintf(target, "0:0x%.6x,1:0x%.6x,2:0x%.6x,3:0x%.6x,4:0x%.6x,5:0x%.6x,6:0x%.6x,7:0x%.6x",
		colors[0],
		colors[1],
		colors[2],
		colors[3],
		colors[4],
		colors[5],
		colors[6],
		colors[7]);
	return strlen(target) + 1;
}

int write_to_stick(int driver_file, char *message, int len) {
	if (write(driver_file, message, len) < 0) {
		printf("Write operation failed\n");
		return -1;
	}
	return 0;
}

void init_starts(double step, double *starts) {
	int i;
	for(i = 0; i < NR_LEDS; i++) {
		starts[i] = step * i;
	}
}

void update_intensities(double elapsed, double *starts, double *intensities) {
	int i;
	for(i = 0; i < NR_LEDS; i++) {
		double raw = sin((elapsed - starts[i]) * (NR_LEDS * 2));
		intensities[i] = cabs(raw);
	}
}

unsigned int get_color(unsigned int base_shift, double intensity) {
	unsigned int color = 0xFF * (intensity / BRIGHTNESS_COEFFICIENT);
	return (0xFFFFFF & (color << base_shift));
}

void update_colors(int base_shift, double *intensities, unsigned int *colors) {
	int i;
	for(i = 0; i < NR_LEDS; i++) {
		colors[i] = get_color(base_shift, intensities[i]);
	}
}

void execute_display( void ) {
	double step = INTERVAL / NR_LEDS;
	double elapsed;
	double intensities[NR_LEDS];
	double starts[NR_LEDS];
	unsigned int colors[NR_LEDS];

	char message[MAX_MESSAGE_LEN];
	int message_len;

	int driver_file;
	driver_file = open(DRIVER_PATH, O_RDWR);
	if (driver_file <= 0) {
		printf("Open operation failed\n");
		return;
	}

	printf("Step: %fms\n", step);

	init_starts(step, starts);

	is_displaying = 1;

	while(1) {
		update_intensities(elapsed, starts, intensities);

		printf("Intensities: %f %f %f %f %f %f %f %f\n",
			intensities[0],
			intensities[1],
			intensities[2],
			intensities[3],
			intensities[4],
			intensities[5],
			intensities[6],
			intensities[7]);

		update_colors(base_shift, intensities, colors);

		printf("Colors: %x %x %x %x %x %x %x %x\n",
			colors[0],
			colors[1],
			colors[2],
			colors[3],
			colors[4],
			colors[5],
			colors[6],
			colors[7]);

		message_len = compose_message(colors, message);

		printf("Composed Message: %s\n", message);

		if (write_to_stick(driver_file, message, message_len) != 0) {
			is_displaying = 0;
			perror("Something went wrong");
			close(driver_file);
			return;
		}

		elapsed += step;
		usleep(step);
	}
	
	close(driver_file);	
	is_displaying = 0;
}

int main(int argc, char** argv) {
	pthread_t display_thread;

	if (pthread_create(&display_thread, NULL, (void *) (&execute_display), NULL) != 0) {
		perror("ERROR");
		return 1;
	}

	while(is_displaying) {
		char color = getchar();
		switch (color) {
			case 'r':
				printf("RED\n");
				base_shift = RED_SHIFT;
				break;
			case 'g':
				printf("GREEN\n");
				base_shift = GREEN_SHIFT;
				break;
			case 'b':
				printf("BLUE\n");
				base_shift = BLUE_SHIFT;
				break;
		}

		usleep(1000);
	}

	pthread_join(display_thread, NULL);

	return 0;
}
